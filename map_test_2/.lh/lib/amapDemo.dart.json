{
    "sourceFile": "lib/amapDemo.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1725185860480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1725185873981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import 'dart:async';\r\n import 'dart:io';\r\n- \r\n import 'package:amap_flutter_location/amap_flutter_location.dart';\r\n import 'package:amap_flutter_location/amap_location_option.dart';\r\n import 'package:flutter/foundation.dart';\r\n import 'package:flutter/material.dart';\r\n"
                },
                {
                    "date": 1725185960892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n import 'package:amap_flutter_location/amap_flutter_location.dart';\r\n import 'package:amap_flutter_location/amap_location_option.dart';\r\n import 'package:flutter/foundation.dart';\r\n import 'package:flutter/material.dart';\r\n- \r\n import 'package:amap_flutter_map/amap_flutter_map.dart';\r\n import 'package:amap_flutter_base/amap_flutter_base.dart';\r\n import 'package:permission_handler/permission_handler.dart';\r\n  \r\n"
                },
                {
                    "date": 1725186016933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n  \r\n class AMapPage extends StatelessWidget {\r\n  \r\n   final String iosKey;\r\n-  final String androidKey;\r\n+  final String androidKey = '';\r\n  \r\n   final LatLng? latLng;\r\n   final void Function(AMapController controller)? onMapCreated;\r\n  \r\n"
                },
                {
                    "date": 1725186028069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,323 @@\n+import 'dart:async';\r\n+import 'dart:io';\r\n+import 'package:amap_flutter_location/amap_flutter_location.dart';\r\n+import 'package:amap_flutter_location/amap_location_option.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:amap_flutter_map/amap_flutter_map.dart';\r\n+import 'package:amap_flutter_base/amap_flutter_base.dart';\r\n+import 'package:permission_handler/permission_handler.dart';\r\n+ \r\n+ \r\n+ \r\n+class AMapPage extends StatelessWidget {\r\n+ \r\n+  final String iosKey;\r\n+  final String androidKey;\r\n+ \r\n+  final LatLng? latLng;\r\n+  final void Function(AMapController controller)? onMapCreated;\r\n+ \r\n+ \r\n+  const AMapPage(this.iosKey, this.androidKey, {Key? key, this.latLng, this.onMapCreated}) : super(key: key);\r\n+ \r\n+ \r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+ \r\n+    CameraPosition kInitialPosition = CameraPosition(\r\n+      target: latLng ?? const LatLng(39.909187, 116.397451),\r\n+      zoom: 10.0,\r\n+    );\r\n+ \r\n+    return AMapWidget(\r\n+      initialCameraPosition: kInitialPosition,\r\n+      buildingsEnabled: false,\r\n+      onMapCreated: onCreated,\r\n+      privacyStatement: const AMapPrivacyStatement(hasShow: true, hasAgree: true, hasContains: true),\r\n+      apiKey: AMapApiKey(\r\n+        iosKey: iosKey,\r\n+        androidKey: androidKey,\r\n+      ),\r\n+    );\r\n+  }\r\n+ \r\n+ \r\n+  void onCreated(AMapController controller) {\r\n+    AMapApprovalNumber.setApprovalNumber(controller);\r\n+    if (onMapCreated != null) onMapCreated!(controller);\r\n+  }\r\n+ \r\n+}\r\n+ \r\n+/// 获取审图号\r\n+/// 这里设计的很奇怪，当地图创建后才知道这个号码，但是这个号码不一定要显示在地图之上，却一定要显示在app之内，主要是和上架后的合规有关\r\n+class AMapApprovalNumber {\r\n+  static String? mapContentApprovalNumber;\r\n+  static String? satelliteImageApprovalNumber;\r\n+ \r\n+  static Function(String? mapContentApprovalNumber, String? satelliteImageApprovalNumber)? _listener;\r\n+ \r\n+  static void addListener(Function(String? mapContentApprovalNumber, String? satelliteImageApprovalNumber) run) {\r\n+    _listener = run;\r\n+  }\r\n+ \r\n+  static void setApprovalNumber(AMapController? mapController) async {\r\n+    //普通地图审图号\r\n+    mapContentApprovalNumber = await mapController?.getMapContentApprovalNumber();\r\n+    //卫星地图审图号\r\n+    satelliteImageApprovalNumber = await mapController?.getSatelliteImageApprovalNumber();\r\n+ \r\n+    if (kDebugMode) {\r\n+      print('地图审图号（普通地图）: $mapContentApprovalNumber');\r\n+      print('地图审图号（卫星地图): $satelliteImageApprovalNumber');\r\n+    }\r\n+ \r\n+    if (_listener != null) _listener!(mapContentApprovalNumber, satelliteImageApprovalNumber);\r\n+  }\r\n+}\r\n+ \r\n+ \r\n+ \r\n+ \r\n+///需要在程序启动时向用户展示隐私政策等\r\n+///高德地图的定位插件，可以进行连续定位，返回当前位置的经纬度以及转译过的位置信息\r\n+mixin AMapLocationStateMixin<WIDGET extends StatefulWidget> on State<WIDGET> {\r\n+ \r\n+  String get iosKey;\r\n+  String get androidKey;\r\n+ \r\n+ \r\n+  /// 是否拥有定位权限\r\n+  bool get hasLocationPermission => _hasLocationPermission;\r\n+ \r\n+  ///获取到的定位信息\r\n+  Map<String, Object> get locationResult => _locationResult ?? {};\r\n+  ///整理过的数据\r\n+  LocationInfo get locationInfo => LocationInfo(locationResult);\r\n+ \r\n+  ///开始定位\r\n+  void startLocation() {\r\n+    ///开始定位之前设置定位参数\r\n+    _setLocationOption();\r\n+    _locationPlugin.startLocation();\r\n+  }\r\n+ \r\n+  ///停止定位\r\n+  void stopLocation() {\r\n+    _locationPlugin.stopLocation();\r\n+  }\r\n+ \r\n+ \r\n+  Map<String, Object>? _locationResult;\r\n+ \r\n+  StreamSubscription<Map<String, Object>>? _locationListener;\r\n+  final AMapFlutterLocation _locationPlugin = AMapFlutterLocation();\r\n+ \r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    /// 设置是否已经包含高德隐私政策并弹窗展示显示用户查看，如果未包含或者没有弹窗展示，高德定位SDK将不会工作\r\n+    ///\r\n+    /// 高德SDK合规使用方案请参考官网地址：https://lbs.amap.com/news/sdkhgsy\r\n+    /// <b>必须保证在调用定位功能之前调用， 建议首次启动App时弹出《隐私政策》并取得用户同意</b>\r\n+    ///\r\n+    /// 高德SDK合规使用方案请参考官网地址：https://lbs.amap.com/news/sdkhgsy\r\n+    ///\r\n+    /// [hasContains] 隐私声明中是否包含高德隐私政策说明\r\n+    ///\r\n+    /// [hasShow] 隐私权政策是否弹窗展示告知用户\r\n+    AMapFlutterLocation.updatePrivacyShow(true, true);\r\n+ \r\n+    /// 设置是否已经取得用户同意，如果未取得用户同意，高德定位SDK将不会工作\r\n+    ///\r\n+    /// 高德SDK合规使用方案请参考官网地址：https://lbs.amap.com/news/sdkhgsy\r\n+    ///\r\n+    /// <b>必须保证在调用定位功能之前调用, 建议首次启动App时弹出《隐私政策》并取得用户同意</b>\r\n+    ///\r\n+    /// [hasAgree] 隐私权政策是否已经取得用户同意\r\n+    AMapFlutterLocation.updatePrivacyAgree(true);\r\n+ \r\n+    /// 动态申请定位权限\r\n+    _requestLocationPermission();\r\n+ \r\n+    ///设置Android和iOS的apiKey<br>\r\n+    ///key的申请请参考高德开放平台官网说明<br>\r\n+    ///Android: https://lbs.amap.com/api/android-location-sdk/guide/create-project/get-key\r\n+    ///iOS: https://lbs.amap.com/api/ios-location-sdk/guide/create-project/get-key\r\n+    AMapFlutterLocation.setApiKey(androidKey, iosKey);\r\n+ \r\n+    ///iOS 获取native精度类型\r\n+    if (Platform.isIOS) {\r\n+      _requestAccuracyAuthorization();\r\n+    }\r\n+ \r\n+    ///注册定位结果监听\r\n+    _locationListener = _locationPlugin.onLocationChanged().listen((Map<String, Object> result) {\r\n+      setState(() {\r\n+        _locationResult = result;\r\n+      });\r\n+    });\r\n+  }\r\n+ \r\n+  @override\r\n+  void dispose() {\r\n+    super.dispose();\r\n+ \r\n+    ///移除定位监听\r\n+    if (null != _locationListener) {\r\n+      _locationListener?.cancel();\r\n+    }\r\n+ \r\n+    ///销毁定位\r\n+    _locationPlugin.destroy();\r\n+  }\r\n+ \r\n+  ///设置定位参数\r\n+  void _setLocationOption() {\r\n+    AMapLocationOption locationOption = AMapLocationOption();\r\n+ \r\n+    ///是否单次定位\r\n+    locationOption.onceLocation = false;\r\n+ \r\n+    ///是否需要返回逆地理信息\r\n+    locationOption.needAddress = true;\r\n+ \r\n+    ///逆地理信息的语言类型\r\n+    locationOption.geoLanguage = GeoLanguage.DEFAULT;\r\n+ \r\n+    locationOption.desiredLocationAccuracyAuthorizationMode = AMapLocationAccuracyAuthorizationMode.ReduceAccuracy;\r\n+ \r\n+    locationOption.fullAccuracyPurposeKey = \"AMapLocationScene\";\r\n+ \r\n+    ///设置Android端连续定位的定位间隔\r\n+    locationOption.locationInterval = 2000;\r\n+ \r\n+    ///设置Android端的定位模式<br>\r\n+    ///可选值：<br>\r\n+    ///<li>[AMapLocationMode.Battery_Saving]</li>\r\n+    ///<li>[AMapLocationMode.Device_Sensors]</li>\r\n+    ///<li>[AMapLocationMode.Hight_Accuracy]</li>\r\n+    locationOption.locationMode = AMapLocationMode.Hight_Accuracy;\r\n+ \r\n+    ///设置iOS端的定位最小更新距离<br>\r\n+    locationOption.distanceFilter = -1;\r\n+ \r\n+    ///设置iOS端期望的定位精度\r\n+    /// 可选值：<br>\r\n+    /// <li>[DesiredAccuracy.Best] 最高精度</li>\r\n+    /// <li>[DesiredAccuracy.BestForNavigation] 适用于导航场景的高精度 </li>\r\n+    /// <li>[DesiredAccuracy.NearestTenMeters] 10米 </li>\r\n+    /// <li>[DesiredAccuracy.Kilometer] 1000米</li>\r\n+    /// <li>[DesiredAccuracy.ThreeKilometers] 3000米</li>\r\n+    locationOption.desiredAccuracy = DesiredAccuracy.Best;\r\n+ \r\n+    ///设置iOS端是否允许系统暂停定位\r\n+    locationOption.pausesLocationUpdatesAutomatically = false;\r\n+ \r\n+    ///将定位参数设置给定位插件\r\n+    _locationPlugin.setLocationOption(locationOption);\r\n+  }\r\n+ \r\n+ \r\n+  ///获取iOS native的accuracyAuthorization类型\r\n+  Future<AMapAccuracyAuthorization> _requestAccuracyAuthorization() async {\r\n+    AMapAccuracyAuthorization currentAccuracyAuthorization = await _locationPlugin.getSystemAccuracyAuthorization();\r\n+    if (kDebugMode) {\r\n+      if (currentAccuracyAuthorization == AMapAccuracyAuthorization.AMapAccuracyAuthorizationFullAccuracy) {\r\n+        print(\"精确定位类型\");\r\n+      } else if (currentAccuracyAuthorization == AMapAccuracyAuthorization.AMapAccuracyAuthorizationReducedAccuracy) {\r\n+        print(\"模糊定位类型\");\r\n+      } else {\r\n+        print(\"未知定位类型\");\r\n+      }\r\n+    }\r\n+ \r\n+    return currentAccuracyAuthorization;\r\n+  }\r\n+ \r\n+ \r\n+  bool _hasLocationPermission = false;\r\n+ \r\n+  /// 申请定位权限\r\n+  Future<void> _requestLocationPermission() async {\r\n+    //获取当前的权限\r\n+    var status = await Permission.location.status;\r\n+    if (status == PermissionStatus.granted) {\r\n+      //已经授权\r\n+      _hasLocationPermission = true;\r\n+    } else {\r\n+      //未授权则发起一次申请\r\n+      status = await Permission.location.request();\r\n+      if (status == PermissionStatus.granted) {\r\n+        _hasLocationPermission = true;\r\n+      } else {\r\n+        _hasLocationPermission = false;\r\n+      }\r\n+    }\r\n+ \r\n+    if (kDebugMode) {\r\n+      if (_hasLocationPermission) {\r\n+        print(\"定位权限申请通过\");\r\n+      } else {\r\n+        print(\"定位权限申请不通过\");\r\n+      }\r\n+    }\r\n+ \r\n+  }\r\n+}\r\n+ \r\n+ \r\n+class LocationInfo {\r\n+ \r\n+  //TODO:应当再此类对信息做转换，明确数据类型\r\n+ \r\n+  String? locTime;\r\n+  String? province;\r\n+  String? callbackTime;\r\n+  String? district;\r\n+  double? speed;\r\n+ \r\n+  double? latitude;\r\n+  double? longitude;\r\n+ \r\n+  String? country;\r\n+  String? city;\r\n+  String? cityCode;\r\n+  String? street;\r\n+  String? streetNumber;\r\n+  String? address;\r\n+  String? description;\r\n+ \r\n+  double? bearing;\r\n+  double? accuracy;\r\n+  String? adCode;\r\n+  double? altitude;\r\n+  int? locationType;\r\n+ \r\n+  LocationInfo(Map<String, Object> locationResult) {\r\n+    locTime = locationResult[\"locTime\"] as String;\r\n+    province = locationResult[\"province\"] as String;\r\n+    callbackTime = locationResult[\"callbackTime\"] as String;\r\n+    district = locationResult[\"district\"] as String;\r\n+    speed = locationResult[\"speed\"] as double;\r\n+ \r\n+    latitude = double.parse(locationResult[\"latitude\"] as String);\r\n+    longitude = double.parse(locationResult[\"longitude\"] as String);\r\n+ \r\n+    country = locationResult[\"country\"] as String;\r\n+    city = locationResult[\"city\"] as String;\r\n+    cityCode = locationResult[\"cityCode\"] as String;\r\n+    street = locationResult[\"street\"] as String;\r\n+    streetNumber = locationResult[\"streetNumber\"] as String;\r\n+    address = locationResult[\"address\"] as String;\r\n+    description = locationResult[\"description\"] as String;\r\n+ \r\n+    bearing = locationResult[\"bearing\"] as double;\r\n+    accuracy = locationResult[\"accuracy\"] as double;\r\n+    adCode = locationResult[\"adCode\"] as String;\r\n+    altitude = locationResult[\"altitude\"] as double;\r\n+    locationType = locationResult[\"locationType\"] as int;\r\n+  }\r\n+ \r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1725186046766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,321 @@\n+import 'dart:async';\r\n+import 'dart:io';\r\n+import 'package:amap_flutter_location/amap_flutter_location.dart';\r\n+import 'package:amap_flutter_location/amap_location_option.dart';\r\n+import 'package:flutter/foundation.dart';\r\n+import 'package:flutter/material.dart';\r\n+import 'package:amap_flutter_map/amap_flutter_map.dart';\r\n+import 'package:amap_flutter_base/amap_flutter_base.dart';\r\n+import 'package:permission_handler/permission_handler.dart';\r\n+\r\n+class AMapPage extends StatelessWidget {\r\n+  final String iosKey;\r\n+  final String androidKey;\r\n+\r\n+  final LatLng? latLng;\r\n+  final void Function(AMapController controller)? onMapCreated;\r\n+\r\n+  const AMapPage(this.iosKey, this.androidKey,\r\n+      {Key? key, this.latLng, this.onMapCreated})\r\n+      : super(key: key);\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    CameraPosition kInitialPosition = CameraPosition(\r\n+      target: latLng ?? const LatLng(39.909187, 116.397451),\r\n+      zoom: 10.0,\r\n+    );\r\n+\r\n+    return AMapWidget(\r\n+      initialCameraPosition: kInitialPosition,\r\n+      buildingsEnabled: false,\r\n+      onMapCreated: onCreated,\r\n+      privacyStatement: const AMapPrivacyStatement(\r\n+          hasShow: true, hasAgree: true, hasContains: true),\r\n+      apiKey: AMapApiKey(\r\n+        iosKey: iosKey,\r\n+        androidKey: androidKey,\r\n+      ),\r\n+    );\r\n+  }\r\n+\r\n+  void onCreated(AMapController controller) {\r\n+    AMapApprovalNumber.setApprovalNumber(controller);\r\n+    if (onMapCreated != null) onMapCreated!(controller);\r\n+  }\r\n+}\r\n+\r\n+/// 获取审图号\r\n+/// 这里设计的很奇怪，当地图创建后才知道这个号码，但是这个号码不一定要显示在地图之上，却一定要显示在app之内，主要是和上架后的合规有关\r\n+class AMapApprovalNumber {\r\n+  static String? mapContentApprovalNumber;\r\n+  static String? satelliteImageApprovalNumber;\r\n+\r\n+  static Function(String? mapContentApprovalNumber,\r\n+      String? satelliteImageApprovalNumber)? _listener;\r\n+\r\n+  static void addListener(\r\n+      Function(String? mapContentApprovalNumber,\r\n+              String? satelliteImageApprovalNumber)\r\n+          run) {\r\n+    _listener = run;\r\n+  }\r\n+\r\n+  static void setApprovalNumber(AMapController? mapController) async {\r\n+    //普通地图审图号\r\n+    mapContentApprovalNumber =\r\n+        await mapController?.getMapContentApprovalNumber();\r\n+    //卫星地图审图号\r\n+    satelliteImageApprovalNumber =\r\n+        await mapController?.getSatelliteImageApprovalNumber();\r\n+\r\n+    if (kDebugMode) {\r\n+      print('地图审图号（普通地图）: $mapContentApprovalNumber');\r\n+      print('地图审图号（卫星地图): $satelliteImageApprovalNumber');\r\n+    }\r\n+\r\n+    if (_listener != null)\r\n+      _listener!(mapContentApprovalNumber, satelliteImageApprovalNumber);\r\n+  }\r\n+}\r\n+\r\n+///需要在程序启动时向用户展示隐私政策等\r\n+///高德地图的定位插件，可以进行连续定位，返回当前位置的经纬度以及转译过的位置信息\r\n+mixin AMapLocationStateMixin<WIDGET extends StatefulWidget> on State<WIDGET> {\r\n+  String get iosKey;\r\n+  String get androidKey;\r\n+\r\n+  /// 是否拥有定位权限\r\n+  bool get hasLocationPermission => _hasLocationPermission;\r\n+\r\n+  ///获取到的定位信息\r\n+  Map<String, Object> get locationResult => _locationResult ?? {};\r\n+\r\n+  ///整理过的数据\r\n+  LocationInfo get locationInfo => LocationInfo(locationResult);\r\n+\r\n+  ///开始定位\r\n+  void startLocation() {\r\n+    ///开始定位之前设置定位参数\r\n+    _setLocationOption();\r\n+    _locationPlugin.startLocation();\r\n+  }\r\n+\r\n+  ///停止定位\r\n+  void stopLocation() {\r\n+    _locationPlugin.stopLocation();\r\n+  }\r\n+\r\n+  Map<String, Object>? _locationResult;\r\n+\r\n+  StreamSubscription<Map<String, Object>>? _locationListener;\r\n+  final AMapFlutterLocation _locationPlugin = AMapFlutterLocation();\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+\r\n+    /// 设置是否已经包含高德隐私政策并弹窗展示显示用户查看，如果未包含或者没有弹窗展示，高德定位SDK将不会工作\r\n+    ///\r\n+    /// 高德SDK合规使用方案请参考官网地址：https://lbs.amap.com/news/sdkhgsy\r\n+    /// <b>必须保证在调用定位功能之前调用， 建议首次启动App时弹出《隐私政策》并取得用户同意</b>\r\n+    ///\r\n+    /// 高德SDK合规使用方案请参考官网地址：https://lbs.amap.com/news/sdkhgsy\r\n+    ///\r\n+    /// [hasContains] 隐私声明中是否包含高德隐私政策说明\r\n+    ///\r\n+    /// [hasShow] 隐私权政策是否弹窗展示告知用户\r\n+    AMapFlutterLocation.updatePrivacyShow(true, true);\r\n+\r\n+    /// 设置是否已经取得用户同意，如果未取得用户同意，高德定位SDK将不会工作\r\n+    ///\r\n+    /// 高德SDK合规使用方案请参考官网地址：https://lbs.amap.com/news/sdkhgsy\r\n+    ///\r\n+    /// <b>必须保证在调用定位功能之前调用, 建议首次启动App时弹出《隐私政策》并取得用户同意</b>\r\n+    ///\r\n+    /// [hasAgree] 隐私权政策是否已经取得用户同意\r\n+    AMapFlutterLocation.updatePrivacyAgree(true);\r\n+\r\n+    /// 动态申请定位权限\r\n+    _requestLocationPermission();\r\n+\r\n+    ///设置Android和iOS的apiKey<br>\r\n+    ///key的申请请参考高德开放平台官网说明<br>\r\n+    ///Android: https://lbs.amap.com/api/android-location-sdk/guide/create-project/get-key\r\n+    ///iOS: https://lbs.amap.com/api/ios-location-sdk/guide/create-project/get-key\r\n+    AMapFlutterLocation.setApiKey(androidKey, iosKey);\r\n+\r\n+    ///iOS 获取native精度类型\r\n+    if (Platform.isIOS) {\r\n+      _requestAccuracyAuthorization();\r\n+    }\r\n+\r\n+    ///注册定位结果监听\r\n+    _locationListener = _locationPlugin\r\n+        .onLocationChanged()\r\n+        .listen((Map<String, Object> result) {\r\n+      setState(() {\r\n+        _locationResult = result;\r\n+      });\r\n+    });\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    super.dispose();\r\n+\r\n+    ///移除定位监听\r\n+    if (null != _locationListener) {\r\n+      _locationListener?.cancel();\r\n+    }\r\n+\r\n+    ///销毁定位\r\n+    _locationPlugin.destroy();\r\n+  }\r\n+\r\n+  ///设置定位参数\r\n+  void _setLocationOption() {\r\n+    AMapLocationOption locationOption = AMapLocationOption();\r\n+\r\n+    ///是否单次定位\r\n+    locationOption.onceLocation = false;\r\n+\r\n+    ///是否需要返回逆地理信息\r\n+    locationOption.needAddress = true;\r\n+\r\n+    ///逆地理信息的语言类型\r\n+    locationOption.geoLanguage = GeoLanguage.DEFAULT;\r\n+\r\n+    locationOption.desiredLocationAccuracyAuthorizationMode =\r\n+        AMapLocationAccuracyAuthorizationMode.ReduceAccuracy;\r\n+\r\n+    locationOption.fullAccuracyPurposeKey = \"AMapLocationScene\";\r\n+\r\n+    ///设置Android端连续定位的定位间隔\r\n+    locationOption.locationInterval = 2000;\r\n+\r\n+    ///设置Android端的定位模式<br>\r\n+    ///可选值：<br>\r\n+    ///<li>[AMapLocationMode.Battery_Saving]</li>\r\n+    ///<li>[AMapLocationMode.Device_Sensors]</li>\r\n+    ///<li>[AMapLocationMode.Hight_Accuracy]</li>\r\n+    locationOption.locationMode = AMapLocationMode.Hight_Accuracy;\r\n+\r\n+    ///设置iOS端的定位最小更新距离<br>\r\n+    locationOption.distanceFilter = -1;\r\n+\r\n+    ///设置iOS端期望的定位精度\r\n+    /// 可选值：<br>\r\n+    /// <li>[DesiredAccuracy.Best] 最高精度</li>\r\n+    /// <li>[DesiredAccuracy.BestForNavigation] 适用于导航场景的高精度 </li>\r\n+    /// <li>[DesiredAccuracy.NearestTenMeters] 10米 </li>\r\n+    /// <li>[DesiredAccuracy.Kilometer] 1000米</li>\r\n+    /// <li>[DesiredAccuracy.ThreeKilometers] 3000米</li>\r\n+    locationOption.desiredAccuracy = DesiredAccuracy.Best;\r\n+\r\n+    ///设置iOS端是否允许系统暂停定位\r\n+    locationOption.pausesLocationUpdatesAutomatically = false;\r\n+\r\n+    ///将定位参数设置给定位插件\r\n+    _locationPlugin.setLocationOption(locationOption);\r\n+  }\r\n+\r\n+  ///获取iOS native的accuracyAuthorization类型\r\n+  Future<AMapAccuracyAuthorization> _requestAccuracyAuthorization() async {\r\n+    AMapAccuracyAuthorization currentAccuracyAuthorization =\r\n+        await _locationPlugin.getSystemAccuracyAuthorization();\r\n+    if (kDebugMode) {\r\n+      if (currentAccuracyAuthorization ==\r\n+          AMapAccuracyAuthorization.AMapAccuracyAuthorizationFullAccuracy) {\r\n+        print(\"精确定位类型\");\r\n+      } else if (currentAccuracyAuthorization ==\r\n+          AMapAccuracyAuthorization.AMapAccuracyAuthorizationReducedAccuracy) {\r\n+        print(\"模糊定位类型\");\r\n+      } else {\r\n+        print(\"未知定位类型\");\r\n+      }\r\n+    }\r\n+\r\n+    return currentAccuracyAuthorization;\r\n+  }\r\n+\r\n+  bool _hasLocationPermission = false;\r\n+\r\n+  /// 申请定位权限\r\n+  Future<void> _requestLocationPermission() async {\r\n+    //获取当前的权限\r\n+    var status = await Permission.location.status;\r\n+    if (status == PermissionStatus.granted) {\r\n+      //已经授权\r\n+      _hasLocationPermission = true;\r\n+    } else {\r\n+      //未授权则发起一次申请\r\n+      status = await Permission.location.request();\r\n+      if (status == PermissionStatus.granted) {\r\n+        _hasLocationPermission = true;\r\n+      } else {\r\n+        _hasLocationPermission = false;\r\n+      }\r\n+    }\r\n+\r\n+    if (kDebugMode) {\r\n+      if (_hasLocationPermission) {\r\n+        print(\"定位权限申请通过\");\r\n+      } else {\r\n+        print(\"定位权限申请不通过\");\r\n+      }\r\n+    }\r\n+  }\r\n+}\r\n+\r\n+class LocationInfo {\r\n+  //TODO:应当再此类对信息做转换，明确数据类型\r\n+\r\n+  String? locTime;\r\n+  String? province;\r\n+  String? callbackTime;\r\n+  String? district;\r\n+  double? speed;\r\n+\r\n+  double? latitude;\r\n+  double? longitude;\r\n+\r\n+  String? country;\r\n+  String? city;\r\n+  String? cityCode;\r\n+  String? street;\r\n+  String? streetNumber;\r\n+  String? address;\r\n+  String? description;\r\n+\r\n+  double? bearing;\r\n+  double? accuracy;\r\n+  String? adCode;\r\n+  double? altitude;\r\n+  int? locationType;\r\n+\r\n+  LocationInfo(Map<String, Object> locationResult) {\r\n+    locTime = locationResult[\"locTime\"] as String;\r\n+    province = locationResult[\"province\"] as String;\r\n+    callbackTime = locationResult[\"callbackTime\"] as String;\r\n+    district = locationResult[\"district\"] as String;\r\n+    speed = locationResult[\"speed\"] as double;\r\n+\r\n+    latitude = double.parse(locationResult[\"latitude\"] as String);\r\n+    longitude = double.parse(locationResult[\"longitude\"] as String);\r\n+\r\n+    country = locationResult[\"country\"] as String;\r\n+    city = locationResult[\"city\"] as String;\r\n+    cityCode = locationResult[\"cityCode\"] as String;\r\n+    street = locationResult[\"street\"] as String;\r\n+    streetNumber = locationResult[\"streetNumber\"] as String;\r\n+    address = locationResult[\"address\"] as String;\r\n+    description = locationResult[\"description\"] as String;\r\n+\r\n+    bearing = locationResult[\"bearing\"] as double;\r\n+    accuracy = locationResult[\"accuracy\"] as double;\r\n+    adCode = locationResult[\"adCode\"] as String;\r\n+    altitude = locationResult[\"altitude\"] as double;\r\n+    locationType = locationResult[\"locationType\"] as int;\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1725185860480,
            "name": "Commit-0",
            "content": "import 'dart:async';\r\nimport 'dart:io';\r\n \r\nimport 'package:amap_flutter_location/amap_flutter_location.dart';\r\nimport 'package:amap_flutter_location/amap_location_option.dart';\r\nimport 'package:flutter/foundation.dart';\r\nimport 'package:flutter/material.dart';\r\n \r\nimport 'package:amap_flutter_map/amap_flutter_map.dart';\r\nimport 'package:amap_flutter_base/amap_flutter_base.dart';\r\nimport 'package:permission_handler/permission_handler.dart';\r\n \r\n \r\n \r\nclass AMapPage extends StatelessWidget {\r\n \r\n  final String iosKey;\r\n  final String androidKey;\r\n \r\n  final LatLng? latLng;\r\n  final void Function(AMapController controller)? onMapCreated;\r\n \r\n \r\n  const AMapPage(this.iosKey, this.androidKey, {Key? key, this.latLng, this.onMapCreated}) : super(key: key);\r\n \r\n \r\n  @override\r\n  Widget build(BuildContext context) {\r\n \r\n    CameraPosition kInitialPosition = CameraPosition(\r\n      target: latLng ?? const LatLng(39.909187, 116.397451),\r\n      zoom: 10.0,\r\n    );\r\n \r\n    return AMapWidget(\r\n      initialCameraPosition: kInitialPosition,\r\n      buildingsEnabled: false,\r\n      onMapCreated: onCreated,\r\n      privacyStatement: const AMapPrivacyStatement(hasShow: true, hasAgree: true, hasContains: true),\r\n      apiKey: AMapApiKey(\r\n        iosKey: iosKey,\r\n        androidKey: androidKey,\r\n      ),\r\n    );\r\n  }\r\n \r\n \r\n  void onCreated(AMapController controller) {\r\n    AMapApprovalNumber.setApprovalNumber(controller);\r\n    if (onMapCreated != null) onMapCreated!(controller);\r\n  }\r\n \r\n}\r\n \r\n/// 获取审图号\r\n/// 这里设计的很奇怪，当地图创建后才知道这个号码，但是这个号码不一定要显示在地图之上，却一定要显示在app之内，主要是和上架后的合规有关\r\nclass AMapApprovalNumber {\r\n  static String? mapContentApprovalNumber;\r\n  static String? satelliteImageApprovalNumber;\r\n \r\n  static Function(String? mapContentApprovalNumber, String? satelliteImageApprovalNumber)? _listener;\r\n \r\n  static void addListener(Function(String? mapContentApprovalNumber, String? satelliteImageApprovalNumber) run) {\r\n    _listener = run;\r\n  }\r\n \r\n  static void setApprovalNumber(AMapController? mapController) async {\r\n    //普通地图审图号\r\n    mapContentApprovalNumber = await mapController?.getMapContentApprovalNumber();\r\n    //卫星地图审图号\r\n    satelliteImageApprovalNumber = await mapController?.getSatelliteImageApprovalNumber();\r\n \r\n    if (kDebugMode) {\r\n      print('地图审图号（普通地图）: $mapContentApprovalNumber');\r\n      print('地图审图号（卫星地图): $satelliteImageApprovalNumber');\r\n    }\r\n \r\n    if (_listener != null) _listener!(mapContentApprovalNumber, satelliteImageApprovalNumber);\r\n  }\r\n}\r\n \r\n \r\n \r\n \r\n///需要在程序启动时向用户展示隐私政策等\r\n///高德地图的定位插件，可以进行连续定位，返回当前位置的经纬度以及转译过的位置信息\r\nmixin AMapLocationStateMixin<WIDGET extends StatefulWidget> on State<WIDGET> {\r\n \r\n  String get iosKey;\r\n  String get androidKey;\r\n \r\n \r\n  /// 是否拥有定位权限\r\n  bool get hasLocationPermission => _hasLocationPermission;\r\n \r\n  ///获取到的定位信息\r\n  Map<String, Object> get locationResult => _locationResult ?? {};\r\n  ///整理过的数据\r\n  LocationInfo get locationInfo => LocationInfo(locationResult);\r\n \r\n  ///开始定位\r\n  void startLocation() {\r\n    ///开始定位之前设置定位参数\r\n    _setLocationOption();\r\n    _locationPlugin.startLocation();\r\n  }\r\n \r\n  ///停止定位\r\n  void stopLocation() {\r\n    _locationPlugin.stopLocation();\r\n  }\r\n \r\n \r\n  Map<String, Object>? _locationResult;\r\n \r\n  StreamSubscription<Map<String, Object>>? _locationListener;\r\n  final AMapFlutterLocation _locationPlugin = AMapFlutterLocation();\r\n \r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    /// 设置是否已经包含高德隐私政策并弹窗展示显示用户查看，如果未包含或者没有弹窗展示，高德定位SDK将不会工作\r\n    ///\r\n    /// 高德SDK合规使用方案请参考官网地址：https://lbs.amap.com/news/sdkhgsy\r\n    /// <b>必须保证在调用定位功能之前调用， 建议首次启动App时弹出《隐私政策》并取得用户同意</b>\r\n    ///\r\n    /// 高德SDK合规使用方案请参考官网地址：https://lbs.amap.com/news/sdkhgsy\r\n    ///\r\n    /// [hasContains] 隐私声明中是否包含高德隐私政策说明\r\n    ///\r\n    /// [hasShow] 隐私权政策是否弹窗展示告知用户\r\n    AMapFlutterLocation.updatePrivacyShow(true, true);\r\n \r\n    /// 设置是否已经取得用户同意，如果未取得用户同意，高德定位SDK将不会工作\r\n    ///\r\n    /// 高德SDK合规使用方案请参考官网地址：https://lbs.amap.com/news/sdkhgsy\r\n    ///\r\n    /// <b>必须保证在调用定位功能之前调用, 建议首次启动App时弹出《隐私政策》并取得用户同意</b>\r\n    ///\r\n    /// [hasAgree] 隐私权政策是否已经取得用户同意\r\n    AMapFlutterLocation.updatePrivacyAgree(true);\r\n \r\n    /// 动态申请定位权限\r\n    _requestLocationPermission();\r\n \r\n    ///设置Android和iOS的apiKey<br>\r\n    ///key的申请请参考高德开放平台官网说明<br>\r\n    ///Android: https://lbs.amap.com/api/android-location-sdk/guide/create-project/get-key\r\n    ///iOS: https://lbs.amap.com/api/ios-location-sdk/guide/create-project/get-key\r\n    AMapFlutterLocation.setApiKey(androidKey, iosKey);\r\n \r\n    ///iOS 获取native精度类型\r\n    if (Platform.isIOS) {\r\n      _requestAccuracyAuthorization();\r\n    }\r\n \r\n    ///注册定位结果监听\r\n    _locationListener = _locationPlugin.onLocationChanged().listen((Map<String, Object> result) {\r\n      setState(() {\r\n        _locationResult = result;\r\n      });\r\n    });\r\n  }\r\n \r\n  @override\r\n  void dispose() {\r\n    super.dispose();\r\n \r\n    ///移除定位监听\r\n    if (null != _locationListener) {\r\n      _locationListener?.cancel();\r\n    }\r\n \r\n    ///销毁定位\r\n    _locationPlugin.destroy();\r\n  }\r\n \r\n  ///设置定位参数\r\n  void _setLocationOption() {\r\n    AMapLocationOption locationOption = AMapLocationOption();\r\n \r\n    ///是否单次定位\r\n    locationOption.onceLocation = false;\r\n \r\n    ///是否需要返回逆地理信息\r\n    locationOption.needAddress = true;\r\n \r\n    ///逆地理信息的语言类型\r\n    locationOption.geoLanguage = GeoLanguage.DEFAULT;\r\n \r\n    locationOption.desiredLocationAccuracyAuthorizationMode = AMapLocationAccuracyAuthorizationMode.ReduceAccuracy;\r\n \r\n    locationOption.fullAccuracyPurposeKey = \"AMapLocationScene\";\r\n \r\n    ///设置Android端连续定位的定位间隔\r\n    locationOption.locationInterval = 2000;\r\n \r\n    ///设置Android端的定位模式<br>\r\n    ///可选值：<br>\r\n    ///<li>[AMapLocationMode.Battery_Saving]</li>\r\n    ///<li>[AMapLocationMode.Device_Sensors]</li>\r\n    ///<li>[AMapLocationMode.Hight_Accuracy]</li>\r\n    locationOption.locationMode = AMapLocationMode.Hight_Accuracy;\r\n \r\n    ///设置iOS端的定位最小更新距离<br>\r\n    locationOption.distanceFilter = -1;\r\n \r\n    ///设置iOS端期望的定位精度\r\n    /// 可选值：<br>\r\n    /// <li>[DesiredAccuracy.Best] 最高精度</li>\r\n    /// <li>[DesiredAccuracy.BestForNavigation] 适用于导航场景的高精度 </li>\r\n    /// <li>[DesiredAccuracy.NearestTenMeters] 10米 </li>\r\n    /// <li>[DesiredAccuracy.Kilometer] 1000米</li>\r\n    /// <li>[DesiredAccuracy.ThreeKilometers] 3000米</li>\r\n    locationOption.desiredAccuracy = DesiredAccuracy.Best;\r\n \r\n    ///设置iOS端是否允许系统暂停定位\r\n    locationOption.pausesLocationUpdatesAutomatically = false;\r\n \r\n    ///将定位参数设置给定位插件\r\n    _locationPlugin.setLocationOption(locationOption);\r\n  }\r\n \r\n \r\n  ///获取iOS native的accuracyAuthorization类型\r\n  Future<AMapAccuracyAuthorization> _requestAccuracyAuthorization() async {\r\n    AMapAccuracyAuthorization currentAccuracyAuthorization = await _locationPlugin.getSystemAccuracyAuthorization();\r\n    if (kDebugMode) {\r\n      if (currentAccuracyAuthorization == AMapAccuracyAuthorization.AMapAccuracyAuthorizationFullAccuracy) {\r\n        print(\"精确定位类型\");\r\n      } else if (currentAccuracyAuthorization == AMapAccuracyAuthorization.AMapAccuracyAuthorizationReducedAccuracy) {\r\n        print(\"模糊定位类型\");\r\n      } else {\r\n        print(\"未知定位类型\");\r\n      }\r\n    }\r\n \r\n    return currentAccuracyAuthorization;\r\n  }\r\n \r\n \r\n  bool _hasLocationPermission = false;\r\n \r\n  /// 申请定位权限\r\n  Future<void> _requestLocationPermission() async {\r\n    //获取当前的权限\r\n    var status = await Permission.location.status;\r\n    if (status == PermissionStatus.granted) {\r\n      //已经授权\r\n      _hasLocationPermission = true;\r\n    } else {\r\n      //未授权则发起一次申请\r\n      status = await Permission.location.request();\r\n      if (status == PermissionStatus.granted) {\r\n        _hasLocationPermission = true;\r\n      } else {\r\n        _hasLocationPermission = false;\r\n      }\r\n    }\r\n \r\n    if (kDebugMode) {\r\n      if (_hasLocationPermission) {\r\n        print(\"定位权限申请通过\");\r\n      } else {\r\n        print(\"定位权限申请不通过\");\r\n      }\r\n    }\r\n \r\n  }\r\n}\r\n \r\n \r\nclass LocationInfo {\r\n \r\n  //TODO:应当再此类对信息做转换，明确数据类型\r\n \r\n  String? locTime;\r\n  String? province;\r\n  String? callbackTime;\r\n  String? district;\r\n  double? speed;\r\n \r\n  double? latitude;\r\n  double? longitude;\r\n \r\n  String? country;\r\n  String? city;\r\n  String? cityCode;\r\n  String? street;\r\n  String? streetNumber;\r\n  String? address;\r\n  String? description;\r\n \r\n  double? bearing;\r\n  double? accuracy;\r\n  String? adCode;\r\n  double? altitude;\r\n  int? locationType;\r\n \r\n  LocationInfo(Map<String, Object> locationResult) {\r\n    locTime = locationResult[\"locTime\"] as String;\r\n    province = locationResult[\"province\"] as String;\r\n    callbackTime = locationResult[\"callbackTime\"] as String;\r\n    district = locationResult[\"district\"] as String;\r\n    speed = locationResult[\"speed\"] as double;\r\n \r\n    latitude = double.parse(locationResult[\"latitude\"] as String);\r\n    longitude = double.parse(locationResult[\"longitude\"] as String);\r\n \r\n    country = locationResult[\"country\"] as String;\r\n    city = locationResult[\"city\"] as String;\r\n    cityCode = locationResult[\"cityCode\"] as String;\r\n    street = locationResult[\"street\"] as String;\r\n    streetNumber = locationResult[\"streetNumber\"] as String;\r\n    address = locationResult[\"address\"] as String;\r\n    description = locationResult[\"description\"] as String;\r\n \r\n    bearing = locationResult[\"bearing\"] as double;\r\n    accuracy = locationResult[\"accuracy\"] as double;\r\n    adCode = locationResult[\"adCode\"] as String;\r\n    altitude = locationResult[\"altitude\"] as double;\r\n    locationType = locationResult[\"locationType\"] as int;\r\n  }\r\n \r\n}"
        }
    ]
}